const statusDisplay = document.querySelector('.game--status');
let gameActive = true;
let currentPlayer = "X" 
let gameState = ["", "", "", "", "", "", "", "", ""];

const winningMessage = () => `Player ${currentPlayer} has won!`;
const drawMessage = () => `Draw! Play again?`;
const currentPlayerTurn = () => `It's ${currentPlayer}'s turn`;

statusDisplay.innerHTML = currentPlayerTurn();

const winningConditions = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6]
];

// Initially hide the game section and show the menu
document.querySelector('.game').style.display = 'none';

// Function to start the game
function startGame() {
    document.querySelector('.menu').style.display = 'none';
    document.querySelector('.game').style.display = 'block';
}

// Function to show instructions (optional)
function showInstructions() {
    alert("Instructions: Click on a cell to place your symbol. First player to align three symbols wins!");
}

// Function to quit the game (optional)
function quitGame() {
    if (confirm("Are you sure you want to quit?")) {
        window.close(); // or redirect to another page
    }
}

function handleCellPlayed(clickedCell, clickedCellIndex) {
    gameState[clickedCellIndex] = currentPlayer;
    clickedCell.innerHTML = currentPlayer === "X"
        ? `<img src="XImage.png" alt="X" style="width: 100%; height: 100%;">`
        : `<img src="OImage.png" alt="O" style="width: 100%; height: 100%;">`;

    clickedCell.removeEventListener('click', handleCellClick); // Disable further clicks on this cell
}

function handlePlayerChange() {
    currentPlayer = currentPlayer === "X" ? "O" : "X";
    statusDisplay.innerHTML = currentPlayerTurn();
}

function handleResultValidation() {
    let roundWon = false;
    for(let i = 0; i <= 7; i++) {
        const winCondition = winningConditions[i];
        const a = gameState[winCondition[0]];
        const b = gameState[winCondition[1]];
        const c = gameState[winCondition[2]];
        if(a === '' || b === '' || c === '')
            continue;
        if(a === b && b === c) {
            roundWon = true;
            break
        }
    }

    if(roundWon) {
        statusDisplay.innerHTML = winningMessage();
        gameActive = false;
        return;
    }

    const roundDraw = !gameState.includes("");
    if(roundDraw) {
        statusDisplay.innerHTML = drawMessage();
        gameActive = false;
        return;
    }

    handlePlayerChange();
}

function handleCellClick(clickedCellEvent) {
    const clickedCell = clickedCellEvent.target;
    const clickedCellIndex = parseInt(clickedCell.getAttribute('data-cell-index'));

    if(gameState[clickedCellIndex] !== "" || !gameActive)
        return;

    handleCellPlayed(clickedCell, clickedCellIndex);
    handleResultValidation();
}

function handleRestartGame() {
    gameActive = true;
    currentPlayer = "X";
    gameState = ["", "", "", "", "", "", "", "", ""];
    statusDisplay.innerHTML = currentPlayerTurn();

    // Clear the content of all cells and re-enable click events
    document.querySelectorAll('.cell').forEach(cell => {
        cell.innerHTML = "";  // Clear the cell content
        cell.addEventListener('click', handleCellClick); // Re-enable click events
    });
}

function handleBackToMenu() {
    // Hide the game section and show the main menu
    document.querySelector('.game').style.display = 'none';
    document.querySelector('.menu').style.display = 'flex';

    // Optionally reset the game state when returning to the menu
    handleRestartGame();
}

// Game Event Listeners
document.querySelectorAll('.cell').forEach(cell => cell.addEventListener('click', handleCellClick));
document.querySelector('.game--restart').addEventListener('click', handleRestartGame);
document.querySelector('.back--button').addEventListener('click', handleBackToMenu);
